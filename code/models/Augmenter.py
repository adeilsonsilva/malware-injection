import numpy as np
import os

from vendor.pe_injector.injector import PEInjector
from vendor.pe_injector.shifter import PEShifter

def ToNumpyByteArray(data):
  return np.frombuffer(data, dtype=np.uint8)

class RandomPadding(object):

  def __init__(self, length):
    assert isinstance(length, int)
    self.length = length

  def __call__(self, sample):
    buffer = io.BytesIO(sample)

    buffer.write(os.urandom(self.length))
    buffer.seek(0)
    data = buffer.read()
    buffer.close()

    return ToNumpyByteArray(data)

class RandomInjection(object):

  def __init__(self, injection_type):
    assert isinstance(injection_type, tuple)
    self.n_bytes, self.n_sections = injection_type

  def __call__(self, sample):
    injector = PEInjector(sample,
                          self.n_bytes,
                          n_sections_to_inject=self.n_sections)

    return ToNumpyByteArray(injector.run())

class RandomReorder(object):

  def __init__(self):
    return

  def __call__(self, sample):
    shifter = PEShifter(sample)

    return ToNumpyByteArray(shifter.run())
