# Import Python modules
import argparse
import os
import numpy as np
import sys
import random

# Import User packages
from models.Data import MalImgDataset

def get_args(argv=None):
  parser = argparse.ArgumentParser(description="Paper Title")

  parser.add_argument(
    '-i',
    '--input',
    required=True,
    help='Path to input malware dataset folder.'
  )
  parser.add_argument(
    '-o',
    '--output',
    required=True,
    help='Path to save npz file at.'
  )
  parser.add_argument(
    '-t',
    '--type',
    choices=[
      'raw',
      'sequences',
      'image',
    ],
    required=True,
    help='Data type to be interpreted.'
  )
  parser.add_argument(
    '-e',
    '--extension',
    choices=[
      'png',
      'exe',
    ],
    required=True,
    help='Dataset file extension.'
  )
  parser.add_argument(
    '-m',
    '--method',
    choices=[
      'binary',
      'family',
    ],
    required=True,
    help='Dataset type.'
  )
  parser.add_argument(
    '-d',
    '--datatype',
    choices=[
      'random',
      'adversarial',
    ],
    required=True,
    help='Data type to be injected.'
  )
  parser.add_argument(
    "-nb",
    "--number_of_bytes",
    type=int,
    default=1,
    help="Multiplier of FileAlignment"
  )
  parser.add_argument(
    "-ns",
    "--number_of_sections",
    type=int,
    default=1,
    help="Number of injected sections"
  )

  return parser.parse_args(argv)

def load_raw_exe_data(data_handler, random_data=False, binary=False, n_injected_sections=1, n_bytes=1):
  images = []
  labels = []
  data_array = np.array(data_handler.get_all_data())

  if binary == True:
    # If using a binary dataset inject only the malware class
    valid_labels = ['1']
  else:
    valid_labels = [str(x[1]) for x in list(data_handler.class_map.items())]

  for str_label in valid_labels:
    label = int(str_label)
    print(f"Injecting in class {[k for (k, v) in data_handler.class_map.items() if v == label][0]}")

    # Split paths into positive and negative samples (one against all)
    # use malware only
    malware_paths = data_array[np.where(data_array[:, 1] == str_label)][:,0]

    benigns_data  = data_array[np.where(data_array[:, 1] != str_label)]
    benigns_paths = benigns_data[:,0]
    benigns_set_size = benigns_paths.shape[0]

    for exe_path in malware_paths:
      if random_data == False:
        # Select a random negative as source for data injection
        benigns_sample = benigns_paths[random.randint(0, benigns_set_size-1)]
        # print(f"[@] Injecting {exe_path} with {benigns_sample}.")
      else:
        benigns_sample = None

      # Inject malware with benign data
      bin_stream = data_handler.inject_from_file(exe_path,
                                                 benigns_sample,
                                                 n_injected_sections=n_injected_sections,
                                                 n_bytes=n_bytes,
                                                 height=None,
                                                 width=None,
                                                 return_raw=True)
      images.append(bin_stream)
      labels.append(label)

    # Add benigns without injecting
    if binary is True:
      print(f"Saving benign samples")
      X, y = data_handler.load_raw_exe(benigns_data, categorical_y=False)
      for k in range(X.shape[0]):
        images.append(X[k])
        labels.append(y[k])

  return np.array(images, dtype=object), labels, data_handler.class_map


def main(args):

  # Check if path exists
  if not os.path.isdir(args.input):
    raise Exception("The provided path is not a valid dataset.")

  use_random_data = True if args.datatype == 'random' else False
  binary_dataset  = True if args.method == 'binary' else False

  data_handler = MalImgDataset(args.input, args.extension)
  data_handler.split_dataset()
  data_handler.compute_fold_split()

  if args.extension == 'exe' and args.type == 'raw':
    X, y, class_map = load_raw_exe_data(data_handler,
                                        random_data=use_random_data,
                                        binary=binary_dataset,
                                        n_injected_sections=args.number_of_sections,
                                        n_bytes=args.number_of_bytes)
    print(f"Data: {X.shape} x {len(y)}")
    print(f"Classes: {class_map}")

  os.chdir(sys.path[0])
  print(f"Current: {os.getcwd()}")

  np.savez(args.output, X=X, y=y, class_map=class_map)

if __name__ == "__main__":
  arguments = get_args()

  main(arguments)
