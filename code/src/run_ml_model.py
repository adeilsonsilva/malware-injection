#!/usr/bin/env python

# Copyright 2022 Adeilson Silva
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# =========================================================================

# Import Python modules
import argparse
import os

# Import User packages
from models import Data
from models import Chen2018
from models import Le2018
from models import Nataraj2011
from models import Raff2017
from models.Augmenter import RandomInjection, RandomReorder

def get_args(argv=None):
    parser = argparse.ArgumentParser(description="Paper Title")

    parser.add_argument(
        '-p',
        '--path',
        required=True,
        help='Path to malware dataset folder.'
    )
    parser.add_argument(
        '-t',
        '--technique',
        choices=[
            'knn_gist',
            'knn_lbp',
            'malconv',
            'le2018-cnn',
            'le2018-cnn-lstm',
            'le2018-cnn-lstm-bidirectional',
            'inceptionv1',
        ],
        required=True,
        help='Technique to be trained/tested.'
    )
    parser.add_argument(
        "-f",
        "--folds",
        type=int,
        default=1,
        help="Number of folds to be used."
    )
    parser.add_argument(
        "-sm",
        "--split_method",
        choices=[
            'nataraj',
            'stratified_kfold',
            'regular_kfold',
        ],
        default='nataraj',
        help="Method use to split the dataset samples in train/validation/test."
    )
    parser.add_argument(
        "-e",
        "--extension",
        required=True,
        help="File extension of dataset files"
    )
    parser.add_argument(
        "-w",
        "--width",
        type=int,
        default=1e4,
        help="Width to be used for cnn-lstm model"
    )
    parser.add_argument(
        "-m",
        "--max_epochs",
        type=int,
        default=200,
        help="Maximum number of epochs"
    )
    parser.add_argument(
        "-pa",
        "--patience",
        type=int,
        default=10,
        help="Maximum number of epochs"
    )
    parser.add_argument(
        "-bs",
        "--batch_size",
        type=int,
        default=512,
        help="Size of each training batch"
    )
    parser.add_argument(
        "--use-subset",
        default=False,
        help="Use subset"
    )
    parser.add_argument(
        "--test-only",
        default=False,
        help="Path to model to be tested"
    )
    parser.add_argument(
        "--reuse-test",
        default=False,
        help="Path to model to be tested"
    )
    parser.add_argument(
        "--test-injected",
        default=False,
        help="Path to injected dataset to be tested"
    )
    parser.add_argument(
        "--injected-subdir",
        default=False,
        help="Path to injected dataset to be tested"
    )
    parser.add_argument(
        "--online-injection",
        default=False,
        help="Sets if the test set should be used for injection tests"
    )
    parser.add_argument(
        "--binarize",
        default=None,
        type=str,
        help="Sets if the dataset should be binarized."
    )
    parser.add_argument(
        '--test-npz',
        nargs='+',
        help='List of npz datasets to be tested',
        default=[],
        required=False
    )
    parser.add_argument(
        '--augment',
        choices=[
            'reorder',
            'inject',
        ],
        default=[],
        nargs='+',
        help='List of augmentation methods to be performed',
        required=False
    )

    return parser.parse_args(argv)

def main(args):

    allowed_extensions =[
        'png',
        'exe',
        'npz'
    ]

    augmenters = []
    for augment_option in args.augment:
        if augment_option == 'inject':
            augmenters.append(RandomInjection((5,5)))
        if augment_option == 'reorder':
            augmenters.append(RandomReorder())

    # Check if path exists
    if not os.path.isdir(args.path):
        raise Exception("The provided path is not a valid dataset.")
    if args.extension not in allowed_extensions:
        raise Exception("{} is not a valid extension.".format(args.extension))

    # Run training method
    try:
        # Define which technique will be used
        if args.technique == 'knn_gist':
            model = Nataraj2011.KNN(args.path,
                                    ext=args.extension,
                                    descriptor='GIST')
        elif args.technique == 'knn_lbp':
            model = Nataraj2011.KNN(args.path,
                                    ext=args.extension,
                                    descriptor='LBP',
                                    height=256,
                                    width=256)
        elif args.technique == 'malconv':
            model = Raff2017.Malconv(args.path,
                                     max_len=args.width,
                                     max_epochs=args.max_epochs,
                                     patience=args.patience,
                                     batch_size=args.batch_size)
        elif args.technique == 'le2018-cnn':
            model = Le2018.CNN(args.path,
                                       args.extension,
                                       max_len=args.width,
                                       max_epochs=args.max_epochs,
                                       patience=args.patience,
                                       batch_size=args.batch_size,
                                       use_lstm=False,
                                       use_lstm_bidirectional=False)
        elif args.technique == 'le2018-cnn-lstm':
            model = Le2018.CNN(args.path,
                                       args.extension,
                                       max_len=args.width,
                                       max_epochs=args.max_epochs,
                                       patience=args.patience,
                                       batch_size=args.batch_size,
                                       use_lstm=True,
                                       use_lstm_bidirectional=False)
        elif args.technique == 'le2018-cnn-lstm-bidirectional':
            model = Le2018.CNN(args.path,
                                       args.extension,
                                       max_len=args.width,
                                       max_epochs=args.max_epochs,
                                       patience=args.patience,
                                       batch_size=args.batch_size,
                                       use_lstm=True,
                                       use_lstm_bidirectional=True)
        elif args.technique == 'inceptionv1':
            model = Chen2018.InceptionV1(args.path,
                                         args.extension,
                                         max_epochs=args.max_epochs,
                                         patience=10,
                                         batch_size=64,
                                         height=299,
                                         width=299,
                                         learning_rate=1e-4,
                                         lr_treshold=1e-5)
        else:
            raise Exception("The technique '{}' is not defined!".format(args.technique))

        if (args.test_only is not False):
            model_path = os.path.abspath(args.test_only)
            if not args.test_npz:
                if not args.reuse_test:
                    model.test(path=model_path)
                else:
                    with open(args.reuse_test, 'r') as test_file:
                        # Test files are saved as 'path,label'
                        test_data = [(i.rstrip().split(',')[0], int(i.rstrip().split(',')[1]) ) for i in test_file.readlines()]
                        model._test(0, model_path, test_data)
            else:
                for npz in args.test_npz:
                    model._test_injected(npz, 0, model_path=model_path)
        else:
            model.train(n_folds=args.folds,
                        split_method=args.split_method,
                        use_subset=args.use_subset,
                        test_npz=args.test_npz,
                        augmenters=augmenters)
            if (args.test_injected is not False and args.injected_subdir is not False):
                model.test_injected(args.test_injected, args.injected_subdir, sections=5, bytes=5, bytes_start=1, bytes_increment=1)
            if (args.online_injection is not False):
                model.test_online_injection()
    except KeyboardInterrupt:
        raise Exception("***** Ctrl+C received! EOF")

    return 0

if __name__ == "__main__":
    arguments = get_args()
    main_logger = Data.Logger()

    main(arguments)
   # try:
   #     main(arguments)
   # except Exception as instance:
   #     main_logger.exception(instance)
