# Import Python modules
import argparse
import os
import numpy as np
import sys

# Import User packages
from models.Data import MalImgDataset

def get_args(argv=None):
  parser = argparse.ArgumentParser(description="Paper Title")

  parser.add_argument(
    '-i',
    '--input',
    required=True,
    help='Path to input malware dataset folder.'
  )
  parser.add_argument(
    '-o',
    '--output',
    required=True,
    help='Path to save npz file at.'
  )
  parser.add_argument(
    '-t',
    '--type',
    choices=[
      'raw',
      'sequences',
      'image',
    ],
    required=True,
    help='Data type to be interpreted.'
  )
  parser.add_argument(
    '-e',
    '--extension',
    choices=[
      'png',
      'exe',
    ],
    required=True,
    help='Dataset file extension.'
  )
  parser.add_argument(
    '--split',
    default=False,
    help='Shoul split into train/valid/test.'
  )

  return parser.parse_args(argv)

def load_raw_exe_data(data_array):
  images = []
  labels = []
  for s_tuple in data_array:
    exe_path = s_tuple[0]
    label    = s_tuple[1]

    bin_stream = np.fromfile(exe_path, dtype='uint8')
    images.append(bin_stream)
    labels.append(label)

  return np.array(images, dtype=object), labels


def main(args):

  # Check if path exists
  if not os.path.isdir(args.input):
    raise Exception("The provided path is not a valid dataset.")

  data_handler = MalImgDataset(args.input, args.extension)
  data_handler.split_dataset()
  data_handler.compute_fold_split()

  if args.split:
    train_data = data_handler.get_train_data()
    valid_data = data_handler.get_validation_data()
    test_data  = data_handler.get_test_data()

    train_X, train_y, test_X, test_y = (None, None, None, None)

    if args.extension == 'exe' and args.type == 'raw':
      train_X, train_y = load_raw_exe_data(train_data)
      print(f"Train: {train_X.shape} x {len(train_y)}")
      valid_X, valid_y = load_raw_exe_data(valid_data)
      print(f"Validation: {valid_X.shape} x {len(valid_y)}")
      test_X, test_y   = load_raw_exe_data(test_data)
      print(f"Test: {test_X.shape} x {len(test_y)}")

    np.savez(args.output,
            train_X=train_X,
            train_y=train_y,
            valid_X=valid_X,
            valid_y=valid_y,
            test_X=test_X,
            test_y=test_y)
  else:
    data_array = data_handler.get_all_data()
    X, y = load_raw_exe_data(data_array)
    np.savez(args.output, X=X, y=y)

  os.chdir(sys.path[0])
  print(f"Current: {os.getcwd()}")

if __name__ == "__main__":
  arguments = get_args()

  main(arguments)
