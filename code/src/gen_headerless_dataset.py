# Import Python modules
import argparse
import os
import numpy as np
import sys
import pefile

# Import User packages
from models.Data import MalImgDataset

def get_args(argv=None):
  parser = argparse.ArgumentParser(description="Paper Title")

  parser.add_argument(
    '-i',
    '--input',
    required=True,
    help='Path to input malware dataset folder.'
  )
  parser.add_argument(
    '-o',
    '--output',
    required=True,
    help='Path to save dataset files at.'
  )
  parser.add_argument(
    '-e',
    '--extension',
    choices=[
      'png',
      'exe',
    ],
    required=True,
    help='Dataset file extension.'
  )

  return parser.parse_args(argv)

def gen_dataset(data_handler, base_path):
  images = []
  labels = []
  data_array = data_handler.get_all_data()
  for s_tuple in data_array:
    exe_path = s_tuple[0]
    # Search class map for class name with given label
    label = [k for (k, v) in data_handler.class_map.items() if v == s_tuple[1]][0]

    save_path = os.path.abspath(f"{base_path}/{label}")
    if not os.path.isdir(save_path):
      print(f"Creating {save_path}")
      os.makedirs(save_path)

    # use malware only
    # if label == 1:
    #   continue

    m_pe = pefile.PE(exe_path)

    # We need to retrieve the size of the header
    # If we call pe.get_data() with no parameters it returns the whole header
    # https://github.com/erocarrera/pefile/blob/c9e8c59b56cfa14dbeca8cb9e33d3d84056102a6/pefile.py#L5848
    header_size = len(m_pe.get_data())
    bin_stream = np.fromfile(exe_path, dtype='uint8')

    _hash = exe_path.split('/')[-1]

    file_path = os.path.abspath(f"{save_path}/{_hash}")
    # print(file_path)
    bin_stream[header_size:].tofile(file_path)


def main(args):

  input_path  = os.path.abspath(args.input)
  output_path = os.path.abspath(args.output)

  # Check if path exists
  if not os.path.isdir(input_path):
    raise Exception("The provided path is not a valid dataset.")

  data_handler = MalImgDataset(input_path, args.extension)
  data_handler.split_dataset()
  data_handler.compute_fold_split()

  gen_dataset(data_handler, args.output)

if __name__ == "__main__":
  arguments = get_args()

  main(arguments)
